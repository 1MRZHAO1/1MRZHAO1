#include <stdio.h>
#include <stdlib.h>
typedef char BTDataType;
typedef struct BinaryTreeNode
{
	struct BinaryTreeNode* left;
	struct BinaryTreeNode* right;
	BTDataType data;
}BTNode;

void PrevOder(BTNode* root);
void InOder(BTNode* root);
void PostOder(BTNode* root);

//前序，中序，后序的命名其实是根据根访问的前后位置来命名
//根 左子树 右子树
#include "Tree.h"
void PrevOder(BTNode* root)//前序遍历
{
	if (root == NULL)
	{
		printf("NULL ");
		return;
	}
	printf("%c", root->data);
	printf(" ");
	PrevOder(root->left);
	PrevOder(root->right);
}
//左子树 根 右子树
void InOder(BTNode* root)//中序遍历
{
	if (root == NULL)
	{
		printf("NULL ");
		return;
	}
	InOder(root->left);
	printf("%c", root->data);
	printf(" ");
	InOder(root->right);
}
//左子树 右子树 根
void PostOder(BTNode* root)//后序遍历
{
	if (root == NULL)
	{
		printf("NULL ");
		return;
	}
	PostOder(root->left);
	PostOder(root->right);
	printf("%c", root->data);
	printf(" ");
}
//求树的结点数
//先用遍历的思想写一个
//void TreeSize(BTNode* root,int* psize)计数算结点数
//{
//	if (root == NULL)
//	{
//		return;
//	}
//	++(*psize);
//	TreeSize(root->left,psize);
//	TreeSize(root->right,psize);
//	return;
//}
//再用分治的思想写一个，大问题分成小问题
int TreeSize(BTNode* root)
{
	return root == NULL ? 0 : TreeSize(root->left)+TreeSize(root->right)+1;//后序思维来写
}

//求叶子结点的个数
int TreeLeafSize(BTNode* root)
{                     
//return TreeLeafSize(root->left)==NULL&&TreeLeafSize(root->right)==NULL ? 1 :TreeLeafSize(root->left) + TreeLeafSize(root->right);
//这种写法排除不了单侧为空的情况
//会产生NULL+数字的情况
	if (root == NULL)//针对单侧为空的情况
		return 0;
	if (root->left == NULL && root->right == NULL)
		return 1;
	return TreeLeafSize(root->left) + TreeLeafSize(root->right);
}
//前序，中序，后序其实也是深度优先遍历   深度一般选择递归
//层序遍历 广度优先遍历
//写二叉树的层序遍历
//借助队列的先进先出
//核心思路是上面一层带下面一层

void LevelOder(BTNode* root)
{
	Queue q;
	QueueInit(&q);
	if (root)
		QueuePush(&q, root);
	while (!QueueEmpty(&q))
	{
		BTNode* front = QueueFront(&q);
		QueuePop(&q);
		printf("%c", front->data);
		if (front->left)
		{
			QueuePush(&q, front->left);
		}
		if (front->right)
		{
			QueuePush(&q, front->right);
		}
	}
	printf("\n");
	QueueDestory(&q);
}
#include "Tree.h"
int main()
{
	BTNode* A = (BTNode*)malloc(sizeof(BTNode));
	A->data = 'A';
	A->left = NULL;
	A->right = NULL;

	BTNode* B = (BTNode*)malloc(sizeof(BTNode));
	B->data = 'B';
	B->left = NULL;
	B->right = NULL;

	BTNode* C = (BTNode*)malloc(sizeof(BTNode));
	C->data = 'C';
	C->left = NULL;
	C->right = NULL;

	BTNode* D = (BTNode*)malloc(sizeof(BTNode));
	D->data = 'D';
	D->left = NULL;
	D->right = NULL;

	BTNode* E = (BTNode*)malloc(sizeof(BTNode));
	E->data = 'E';
	E->left = NULL;
	E->right = NULL;

	A->left = B;
	A->right = C;

	B->left = D;
	B->right = E;

	PrevOder(A);
	printf("\n");
	InOder(A);
	printf("\n");
	PostOder(A);
	printf("\n");

	return 0;
}
