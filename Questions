描述
输入n个整数的序列，要求对这个序列进行去重操作。所谓去重，是指对这个序列中每个重复出现的整数，只保留该数第一次出现的位置，删除其余位置。
输入描述：
输入包含两行，第一行包含一个正整数n（1 ≤ n ≤ 1000），表示第二行序列中数字的个数；第二行包含n个整数（范围1~5000），用空格分隔。

输出描述：
输出为一行，按照输入的顺序输出去重之后的数字，用空格分隔。

示例1
输入：
5
10 12 93 12 75
复制
输出：
10 12 93 75
#include<stdio.h>
// //暴力求解法，存在问题，无法满足，按照原来的输入顺序来输出，经历了一次排序
// int main()
// {
//     int n=0;
//     int arr[1000]={0};
//     int i=0;
//     scanf("%d",&n);
//     //接受n个数字
//     for(i=0;i<n;i++)
//     {
//         scanf("%d",&arr[i]);
//     }
//     //处理
//     //1.排序  用冒泡排序实现
//     for(i=0;i<n;i++)//趟数
//     {
//         int j=0;
//         for(j=0;j<n-1-i;j++)//每次排好后面一个

//         if(arr[j]>arr[j+1])
//         {
//             int tmp=arr[j];
//             arr[j]=arr[j+1];
//             arr[j+1]=tmp;
//         }
//     }
//     //2.去重  最多比较n-1对
//     //例如 5 3 3 4 2 2
//     //排序成了 2 2 3 3 4 5
//     for(i=0;i<n-1;i++)
//     {
//         if(arr[i]==arr[i+1])
//         {
//            //把从i+1下标往后的元素全部往前覆盖
//             int k=0;
//             for(k=i;k<n-1;k++)
//             {
//                 arr[k]=arr[k+1];
//             }
//             n--;//去重后整体元素个数减少
//             i--;//防止2 3 3 3变为2 3 3这种情况，还得从该处进行比较
//         }

//     }
//     //3.打印
//     for(i=0;i<n;i++)
//     {
//         printf("%d ",arr[i]);
//     }
//     return 0;
// }
//所以我们换另一种不需要排序的方法
//这个方法特别的秀
//先申请一个有1001个元素的数组，arr[1001]，例如拿到一个数字10时，10表示它将放进的元素的下标，就把10存在arr[10]中，再次拿到
//10时还是存在arr[10]中，哈哈哈哈，因为下标不可能有相同的，所以这个大数组中不可能有重复出现的数字
//申请一个1001个元素的数组，是为了下标中出现1000，打印的时候碰到，数值为0的元素就放弃打印，只打印不为0的元素
// int main()
//{
//     int n=0;
//     int arr[1001]={0};//1001
//     scanf("%d",&n);
//     //接受n个数字
//     int i=0;
//     int m=0;
//     for(i=0;i<n;i++)
//     {
//         scanf("%d",&m);
//         arr[m]=m;
//     }
//     for(i=0;i<1001;i++)
//     {
//         if(arr[i]!=0)
//         {
//             printf("%d ",arr[i]);
//         }
//     }
//     return 0;
// }
//下面这段改进的代码，用了两个数组，完全符合题目要求的按输入顺序输出，非常的perfect
int main()
{
    int n=0;
    int arr[1001]={0};//1001
    int arr1[1000]={0};
    scanf("%d",&n);
    //接受n个数字
    int i=0;
    int m=0;
    int k=0;
    for(i=0;i<n;i++)
    {
        scanf("%d",&m);
        if(arr[m]==0)
        {
           arr1[k]=m;
            k++;
        }
        arr[m]=m;
    }
    for(i=0;i<k;i++)
    {
        printf("%d ",arr1[i]);   
    }
    return 0;
}
