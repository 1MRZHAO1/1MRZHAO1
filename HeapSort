#include<stdio.h>
void HeapSort(int* a, int n);
void PrintfArry(int* a, int n);
void TestHeapSort()
{
	int a[] = {3,5,2,7,8,6,1,9,4,0};
	HeapSort(a, sizeof(a) / sizeof(int));
	PrintfArry(a, sizeof(a) / sizeof(int));

}

void PrintfArry(int* a, int n)
{
	for (int i = 0; i < n; i++)
	{
		printf("%d",a[i]);
	}
}

void Swap(int* a, int* b)
{
	
	int tmp = *a;
	*a = *b;
	*b = tmp;
}


//向下调整算法,前提条件是左右子树都为大堆
void AdjustDwon(int* a,int n, int root)//n为排序元素的个数
{
	int parent = root;
	int child = parent * 2 + 1;//默认小的那个是左孩子
	while (child < n)//达到叶子结点不需要再向下再比较，再比较，数组就越界了
	{
		//1.选出左右孩子中最大的一个
		if (child < n - 1 && a[child + 1] > a[child])//而且还要要保证，只有一个左结点没有右结点的情况不会越界
		{
			child += 1;
		}
		if (a[child] >a[parent])//只有一个左结点时会直接跳过与左结点的对比，直接开始与父亲结点的对比
		{
			Swap(&a[child], &a[parent]);
			parent = child;
			child = parent * 2 + 1;
		}
		else {

			break;//上来结点就与左右子树构成了小堆，直接不用动

		}
		//小堆变大堆就是简单颠倒一下符号便可
	}
}
void HeapSort(int* a, int n)
{
//把数组建成堆，建堆
	
	for (int i = (n - 1 - 1) / 2; i >= 0; --i)
	{
		AdjustDwon(a, n, i);
	}
	//排升序，建大堆;
	int end = n - 1;
	while (end > 0)
	{
		Swap(&a[0], &a[end]);
		AdjustDwon(&a[0], end, 0);
		--end;
	}
}
//直接选择排序 很差 因为最好情况执行次数也是O（N*N）
//在元素集合arry[i]---arry[n-1]中选择关键码最大的数据元素
//若它不是这组元素中的最后一个元素，则将它与这组元素中的最后一个元素交换
//在剩余的arry[i]---arry[n-2]集合中，重复上述步骤，直到集合剩余1个元素

void SelectSort(int* a, int n)
{
	int begin = 0, end = n-1;
	while (begin < end)
	{
		int mini = begin;
		int maxi = end;
		for (int i= begin; i <=end; ++i)
		{
			if (a[i] > a[maxi])
			{
				maxi = i;
			}
			if (a[i] < a[mini])
			{
				mini = i;
			}
		}
		Swap(&a[mini], &a[begin]);
		//如果begin跟maxi重叠，需要修正一下maxi的位置
		if (begin == maxi)
		{
			maxi = mini;
		}
		Swap(&a[maxi], &a[end]);
		begin++;
		end--;
	}

	
}


//冒泡排序，通过交换达到排序目的，前一个数大于后一个数则交换
//冒泡排序的时间复杂度为
//N-1
//N-2
//N-3
//.......
//1
//时间复杂度为O（N*N）
//顺便把冒泡排序改进一下
//面对这种情况 1 2 3 4 5 6 7 没有发生交换就不需要往下再冒泡了
//冒泡排序跟直接插入排序相比谁更好？  直接插入排序更好 
void BubbleSort(int* a, int n)
{   
	for (int j = 0; j < n ; ++j)
	{   
		int exchange = 0;
		for (int i = 1; i < n - j; ++i)
		{
			if (a[i-1] > a[i])
			{
				Swap(&a[i-1], &a[i]);//先写一个单趟，再写个停止条件
				exchange = 1;
			}
		}
		if (exchange == 0)
			break;
	}
}
void QuickSort(int* a, int left,int right)
{   
	if (left >= right)//left>right表示没有左区间存在，left=right表示只有一个值
	{
		return;
	}
	int begin = left, end = right;
	int pivot = begin;
	int key = a[begin];
	while (begin < end)
	{
		//选择从左端开始做坑
		//右边找小放到左边
		while (begin < end && a[end] >= key)
		{
			end--;//end持续--可能会导致end到达到begin前面发生交错，把已经处于正确位置的数，又扔到后面的坑中所以while条件里要加一条begin<end
		}
		//选出小的放到左边的坑中，自己就变成了新的坑位
		a[pivot] = a[end];
		pivot = end;
		//key的左边目标是全是小于key，所以从左边找大，放到右边
		while (begin < end && a[begin] <= key)
		{
			begin++;
		}
		a[pivot] = a[begin];
		pivot = begin;//我成为新的坑
	}
	pivot = begin;
	a[pivot] = key;
	//left区间           坑  pivot         right区间
	//[left,pivot-1]       pivot           [pivot+1,right]
	//左子区间和右子区间有序，我们就有序了，如何让他们有序呢?  分治递归  二叉树前序遍历，根，左子树，右子树
	QuickSort(a, left, pivot - 1);
	QuickSort(a, pivot+1, right);
}
void TestQuickSort()
{
	int a[] = { 3,5,2,7,8,6,1,9,4,0 };
	QuickSort(a, 0,sizeof(a) / sizeof(int)-1);
	PrintfArry(a, sizeof(a) / sizeof(int));

}

int main()
{
	TestQuickSort();
}
